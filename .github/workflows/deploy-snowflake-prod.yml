name: snowflake-devops-demo
on:
  push:
    branches:
      - DEV   # Trigger on changes to DEV branch
    paths:
      - 'dbscripts2/**'
  pull_request:
    branches:
      - PROD   # Trigger PR action for PROD branch
  workflow_dispatch:   # Manually triggered

jobs:
  deploy-snowflake-changes-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          pip install snowflake-connector-python
      - name: Deploy SQL files, Archive, and Clean up
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python deploy_sql_files.py  # Deploy + archive + cleanup
      - name: Commit & Push changes
        env:
          TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
          git add .
          git commit -m "Auto deploy, archive old versions, and clean up archive" || echo "No changes"
          git push

  create-pr-from-dev-to-prod:
    runs-on: ubuntu-latest
    needs: deploy-snowflake-changes-job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Git configuration
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
      - name: Set up GitHub CLI
        uses: actions/setup-gh-cli@v2
      - name: Fetch all branches
        run: git fetch --all
      - name: Create Pull Request from DEV to PROD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check out the repository and make sure we are on the right branch
          git checkout DEV
          # Create a PR from DEV to PROD branch
          gh pr create --base PROD --head DEV --title "Auto PR from DEV to PROD" --body "This PR is automatically created from DEV to PROD." || echo "PR already exists or failed to create."
