name: Deploy to PROD

on:
  push:
    branches:
      - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Detect changed project
        id: changes
        run: |
          git fetch origin PROD
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files: $CHANGED_FILES"

          PROJECT=""
          for file in $CHANGED_FILES; do
            if [[ "$file" == dbscripts2/* ]]; then
              PROJECT=$(echo "$file" | cut -d'/' -f2)
              echo "Detected project: $PROJECT"
              break
            fi
          done

          if [[ -z "$PROJECT" ]]; then
            echo "No project changes detected."
            exit 1
          fi

          echo "project=$PROJECT" >> "$GITHUB_OUTPUT"

      - name: Set project-specific secrets
        id: secrets
        run: |
          PROJECT="${{ steps.changes.outputs.project }}"
          echo "Using secrets for project: $PROJECT"

          echo "SNOWSQL_PRIVATE_KEY=${{ secrets[format('{0}_SNOWSQL_PRIVATE_KEY', env.PROJECT)] }}" >> $GITHUB_ENV
          echo "SNOWSQL_ACCOUNT=${{ secrets[format('{0}_SNOWSQL_ACCOUNT', env.PROJECT)] }}" >> $GITHUB_ENV
          echo "SNOWSQL_USER=${{ secrets[format('{0}_SNOWSQL_USER', env.PROJECT)] }}" >> $GITHUB_ENV
          echo "SNOWSQL_ROLE=${{ secrets[format('{0}_SNOWSQL_ROLE', env.PROJECT)] }}" >> $GITHUB_ENV
          echo "SNOWSQL_WAREHOUSE=${{ secrets[format('{0}_SNOWSQL_WAREHOUSE', env.PROJECT)] }}" >> $GITHUB_ENV

      - name: Run deployment script
        run: |
          python deploy.py --project ${{ steps.changes.outputs.project }}
