name: Snowflake CI/CD Deploy (PROD)

on:
  push:
    branches:
      - PROD

jobs:
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: set-projects
        shell: bash
        run: |
          git fetch origin PROD --depth=2
          PREV_COMMIT=$(git rev-parse HEAD^)
          changed_files=$(git diff --name-only $PREV_COMMIT HEAD | grep '\.sql$' || true)

          if [ -z "$changed_files" ]; then
            echo "No changed .sql files."
            echo "projects=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          projects=$(echo "$changed_files" | awk -F/ '{print $2}' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "projects=$projects" >> $GITHUB_OUTPUT

  deploy:
    needs: detect-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-projects.outputs.projects) }}
    env:
      PROJECT: ${{ matrix.project }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python jq cryptography

      - name: Parse project config and save private key
        id: parse-config
        shell: bash
        run: |
          CONFIG_FILE="configs/${PROJECT}.json"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Config file not found: $CONFIG_FILE"
            exit 1
          fi
          echo "Using config file: $CONFIG_FILE"
          ACCOUNT=$(jq -r '.snowflake.account' "$CONFIG_FILE")
          USER=$(jq -r '.snowflake.user' "$CONFIG_FILE")
          ROLE=$(jq -r '.snowflake.role' "$CONFIG_FILE")
          WAREHOUSE=$(jq -r '.snowflake.warehouse' "$CONFIG_FILE")
          DATABASE=$(jq -r '.snowflake.database' "$CONFIG_FILE")
          KEY_PATH=$(jq -r '.key_path' "$CONFIG_FILE")
          echo "ACCOUNT=$ACCOUNT" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV
          echo "ROLE=$ROLE" >> $GITHUB_ENV
          echo "WAREHOUSE=$WAREHOUSE" >> $GITHUB_ENV
          echo "DATABASE=$DATABASE" >> $GITHUB_ENV
          echo "KEY_PATH=$KEY_PATH" >> $GITHUB_ENV

          # Save private key from secret to the key path
          mkdir -p $(dirname "$KEY_PATH")
          echo "${{ secrets[ format('{0}_PRIVATE_KEY', env.PROJECT) ] }}" | tr -d '\r' > "$KEY_PATH"

      - name: Run deployment script with replacements
        env:
          PROJECT: ${{ env.PROJECT }}
          CONFIG_FILE: configs/${{ env.PROJECT }}.json
          SNOWFLAKE_PRIVATE_KEY_PATH: ${{ env.KEY_PATH }}
        run: |
          # Get list of changed SQL files for this project only
          PREV_COMMIT=$(git rev-parse HEAD^)
          changed_files=$(git diff --name-only $PREV_COMMIT HEAD | grep '^dbscripts2/'${PROJECT}'/' | grep '\.sql$' || true)
          if [ -z "$changed_files" ]; then
            echo "No changed SQL files for project $PROJECT, skipping deployment."
            exit 0
          fi
          echo "Deploying changed files for project $PROJECT:"
          echo "$changed_files"

          python deploy_sql_files.py \
            --project "$PROJECT" \
            --files "$changed_files" \
            --config_file "$CONFIG_FILE" \
            --key_path "$SNOWFLAKE_PRIVATE_KEY_PATH" \
            --replacements "_DEV=_PRD"
