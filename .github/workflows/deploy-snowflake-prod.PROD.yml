name: Deploy to PROD

on:
  push:
    branches:
      - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full git history needed for diff HEAD^

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python cryptography pyyaml

      - name: Detect changed files
        id: detect
        run: |
          git fetch origin PROD

          if git rev-parse HEAD^ >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD)
          fi

          echo "Changed files: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

          # Detect project from first matching changed file
          PROJECT=""
          for file in $CHANGED_FILES; do
            if [[ "$file" == dbscripts2/* ]]; then
              PROJECT=$(echo "$file" | cut -d'/' -f2)
              echo "Detected project: $PROJECT"
              break
            fi
          done

          if [[ -z "$PROJECT" ]]; then
            echo "No project changes detected."
            exit 1
          fi

          echo "project=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "PROJECT=$PROJECT" >> "$GITHUB_ENV"

      - name: Set Snowflake private key secret
        run: |
          echo "Using secrets for project: $PROJECT"
          # Export SNOWSQL_PRIVATE_KEY from GitHub Secrets dynamically
          # Because GitHub Actions does not support dynamic secret names directly in expressions,
          # we use a workaround here:
          # (In YAML you can't do env: SNOWSQL_PRIVATE_KEY: ${{ secrets[format('{0}_PRIVATE_KEY', env.PROJECT)] }})
          # So instead do this shell logic:

          if [ "$PROJECT" == "MARKETING" ]; then
            echo "SNOWSQL_PRIVATE_KEY=${{ secrets.MARKETING_PRIVATE_KEY }}" >> $GITHUB_ENV
          elif [ "$PROJECT" == "PROJECTA" ]; then
            echo "SNOWSQL_PRIVATE_KEY=${{ secrets.PROJECTA_PRIVATE_KEY }}" >> $GITHUB_ENV
          else
            echo "No private key secret defined for project $PROJECT"
            exit 1
          fi

      - name: Run deployment script
        env:
          PROJECT: ${{ env.PROJECT }}
          SNOWSQL_PRIVATE_KEY: ${{ env.SNOWSQL_PRIVATE_KEY }}
        run: |
          echo "Running deployment for project: $PROJECT"
          if [ ! -f deploy_sql_files.py ]; then
            echo "Error: deploy_sql_files.py not found!"
            exit 1
          fi
          python deploy_sql_files.py --project "$PROJECT" || (echo "Deployment script failed!" && exit 1)
