name: Snowflake CI/CD Deploy (PROD)

on:
  push:
    branches:
      - PROD

jobs:
  detect-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
      changed_files_json: ${{ steps.set-projects.outputs.changed_files_json }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: set-projects
        shell: bash
        run: |
          git fetch origin PROD --depth=2
          PREV_COMMIT=$(git rev-parse HEAD^)
          changed_files=$(git diff --name-only $PREV_COMMIT HEAD | grep '\.sql$' || true)

          if [ -z "$changed_files" ]; then
            echo "No changed .sql files."
            echo "projects=[]" >> $GITHUB_OUTPUT
            echo "changed_files_json={}" >> $GITHUB_OUTPUT
            exit 0
          fi

          declare -A proj_files_map
          while IFS= read -r file; do
            project=$(echo "$file" | cut -d'/' -f2)
            if [ -z "$project" ]; then
              continue
            fi
            if [[ -z "${proj_files_map[$project]}" ]]; then
              proj_files_map[$project]="$file"
            else
              proj_files_map[$project]="${proj_files_map[$project]} $file"
            fi
          done <<< "$changed_files"

          projects_json=$(printf '%s\n' "${!proj_files_map[@]}" | jq -R . | jq -s .)

          files_json="{"
          first=1
          for proj in "${!proj_files_map[@]}"; do
            files_array=$(echo "${proj_files_map[$proj]}" | tr ' ' '\n' | jq -R . | jq -s .)
            if [ $first -eq 1 ]; then
              first=0
            else
              files_json+=","
            fi
            files_json+="\"$proj\":$files_array"
          done
          files_json+="}"

          echo "projects=$projects_json" >> $GITHUB_OUTPUT
          echo "changed_files_json=$files_json" >> $GITHUB_OUTPUT

  deploy:
    needs: detect-projects
    runs-on: ubuntu-latest
    if: needs.detect-projects.outputs.projects != '[]'
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-projects.outputs.projects) }}
    env:
      PROJECT: ${{ matrix.project }}
      CHANGED_FILES_JSON: ${{ needs.detect-projects.outputs.changed_files_json }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python jq cryptography

      - name: Get changed files for this project
        id: get-files
        run: |
          echo "$CHANGED_FILES_JSON" | jq -r --arg proj "$PROJECT" '.[$proj] | join(" ")' > changed_files.txt
          CHANGED_FILES=$(cat changed_files.txt)
          echo "Changed files for project $PROJECT: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Parse project config JSON and set env vars
        run: |
          CONFIG_FILE="configs/${PROJECT}.json"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found: $CONFIG_FILE"
            exit 1
          fi
          echo "Using config file: $CONFIG_FILE"
          ACCOUNT=$(jq -r '.snowflake.account' "$CONFIG_FILE")
          USER=$(jq -r '.snowflake.user' "$CONFIG_FILE")
          ROLE=$(jq -r '.snowflake.role' "$CONFIG_FILE")
          WAREHOUSE=$(jq -r '.snowflake.warehouse' "$CONFIG_FILE")
          DATABASE=$(jq -r '.snowflake.database' "$CONFIG_FILE")
          KEY_PATH=$(jq -r '.key_path' "$CONFIG_FILE")
          echo "ACCOUNT=$ACCOUNT" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV
          echo "ROLE=$ROLE" >> $GITHUB_ENV
          echo "WAREHOUSE=$WAREHOUSE" >> $GITHUB_ENV
          echo "DATABASE=$DATABASE" >> $GITHUB_ENV
          echo "KEY_PATH=$KEY_PATH" >> $GITHUB_ENV

      - name: Save private key from secret
        shell: bash
        run: |
          mkdir -p keys
          echo "${{ secrets[format('{0}_PRIVATE_KEY', env.PROJECT)] }}" | tr -d '\r' > "${{ env.KEY_PATH }}"

      - name: Run deployment script with PROD replacements
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          PROJECT: ${{ env.PROJECT }}
          CONFIG_FILE: configs/${{ env.PROJECT }}.json
          SNOWFLAKE_PRIVATE_KEY_PATH: ${{ env.KEY_PATH }}
        run: |
          python deploy_sql_files.py \
            --project "$PROJECT" \
            --files "$CHANGED_FILES" \
            --config_file "$CONFIG_FILE" \
            --key_path "$SNOWFLAKE_PRIVATE_KEY_PATH" \
            --replacements "_DEV=_PRD"
