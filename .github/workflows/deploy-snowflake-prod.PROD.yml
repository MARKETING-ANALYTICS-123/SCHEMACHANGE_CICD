name: Snowflake CI/CD Deploy

on:
  pull_request:
    branches:
      - PROD
  push:
    branches:
      - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python jq cryptography

      - name: Get changed SQL files (PR)
        if: github.event_name == 'pull_request'
        id: get-changed-pr
        run: |
          changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.sql$' || true)
          if [ -z "$changed_files" ]; then
            echo "No changed .sql files found, exiting."
            exit 0
          fi
          echo "CHANGED_FILES=$(echo $changed_files | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Get changed SQL files (push)
        if: github.event_name == 'push' && github.ref == 'refs/heads/PROD'
        id: get-changed-push
        run: |
          git fetch origin PROD --depth=2
          PREV_COMMIT=$(git rev-parse HEAD^)
          changed_files=$(git diff --name-only $PREV_COMMIT HEAD | grep '\.sql$' || true)
          if [ -z "$changed_files" ]; then
            echo "No changed .sql files found, exiting."
            exit 0
          fi
          echo "CHANGED_FILES=$(echo $changed_files | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Detect project from first changed file
        id: detect-project
        run: |
          first_file=$(echo "${{ env.CHANGED_FILES }}" | awk '{print $1}')
          project=$(echo "$first_file" | cut -d'/' -f2)
          if [ -z "$project" ]; then
            echo "❌ Could not detect project name."
            exit 1
          fi
          echo "PROJECT=$project" >> $GITHUB_ENV

      - name: Parse project config JSON and set env vars
        id: parse-config
        run: |
          CONFIG_FILE="configs/${{ env.PROJECT }}.json"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Config file not found: $CONFIG_FILE"
            exit 1
          fi
          cat "$CONFIG_FILE"
          ACCOUNT=$(jq -r '.snowflake.account' "$CONFIG_FILE")
          USER=$(jq -r '.snowflake.user' "$CONFIG_FILE")
          ROLE=$(jq -r '.snowflake.role' "$CONFIG_FILE")
          WAREHOUSE=$(jq -r '.snowflake.warehouse' "$CONFIG_FILE")
          DATABASE=$(jq -r '.snowflake.database' "$CONFIG_FILE")
          KEY_PATH=$(jq -r '.key_path' "$CONFIG_FILE")
          echo "ACCOUNT=$ACCOUNT" >> $GITHUB_ENV
          echo "USER=$USER" >> $GITHUB_ENV
          echo "ROLE=$ROLE" >> $GITHUB_ENV
          echo "WAREHOUSE=$WAREHOUSE" >> $GITHUB_ENV
          echo "DATABASE=$DATABASE" >> $GITHUB_ENV
          echo "KEY_PATH=$KEY_PATH" >> $GITHUB_ENV

      - name: Save private key from secret
        run: |
          mkdir -p keys
          echo "${{ secrets[format('{0}_PRIVATE_KEY', env.PROJECT)] }}" | tr -d '\r' > "${{ env.KEY_PATH }}"
        shell: bash

      - name: Run deployment script
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          PROJECT: ${{ env.PROJECT }}
          SNOWFLAKE_ACCOUNT: ${{ env.ACCOUNT }}
          SNOWFLAKE_USER: ${{ env.USER }}
          SNOWFLAKE_ROLE: ${{ env.ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ env.WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ env.DATABASE }}
          SNOWFLAKE_PRIVATE_KEY_PATH: ${{ env.KEY_PATH }}
          CONFIG_FILE: configs/${{ env.PROJECT }}.json
        run: |
          set -x
          echo "Deploying project $PROJECT"
          echo "Changed files: $CHANGED_FILES"
          python deploy_sql_files.py --project "$PROJECT" --files "$CHANGED_FILES" --config_file "$CONFIG_FILE" --key_path "$SNOWFLAKE_PRIVATE_KEY_PATH"
